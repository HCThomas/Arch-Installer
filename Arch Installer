#!/bin/bash

### Choose Profile ###
echo -en "1.\tVirtualBox\n2.\tDesktop\n3.\tOther\nEnter Profile: "
read profile
if [ "$profile" == "" ]; then echo "Profile can't be empty"; exit 1; fi
echo -en "1.\tDOS-root\n2.\tUEFI-boot/root\nEnter Part Layout: "
read part_layout
if [ "$part_layout" == "" ]; then echo "Part layout can't be empty"; exit 1; fi

if [ $profile -eq 1 ]; then
hostname="ArchVB"
user="holden"
password="0"
device="/dev/sda"
cpu=1
nvidia_drivers=0
virtual_box=1
fi

if [ $profile -eq 2 ]; then
hostname="ArchDT"
user="holden"
echo -n "Password: "
read -s password
if [ "$password" == "" ]; then echo "Password can't be empty"; exit 1; fi
echo
echo -n "Repeat Password: "
read -s password2
echo
if [ "$password" != "$password2" ]; then echo "Passwords did not match"; exit 1; fi
lsblk
echo -en "Enter installation disk: "
read device
if [ "$device" == "" ]; then echo "Device can't be empty"; exit 1; fi
cpu=1
nvidia_drivers=1
virtual_box=0
fi

if [ $profile -eq 3 ]; then
echo -n "Enter hostname: "
read hostname
if [ "$hostname" == "" ]; then echo "Hostname can't be empty"; exit 1; fi
echo -n "Enter admin username: "
read user
if [ "$user" == "" ]; then echo "User can't be empty"; exit 1; fi
echo -n "Password: "
read -s password
if [ "$password" == "" ]; then echo "Password can't be empty"; exit 1; fi
echo
echo -n "Repeat Password: "
read -s password2
if [ "$password" != "$password2" ]; then echo "Passwords did not match"; exit 1; fi
lsblk
echo -en "\nEnter installation disk: "
read device
if [ "$device" == "" ]; then echo "Device can't be empty"; exit 1; fi
echo -en "1.\tIntel\n2.\tAMD\n\nSelect CPU: "
read cpu
if [ "$cpu" == "" ]; then echo "CPU can't be empty"; exit 1; fi
echo -en "1\tYes\n2\tNo\nInstall nvidia drivers: "
read nvidia_drivers
if [ "$nvidia_drivers" == "" ]; then echo "Nvidia drivers can't be empty"; exit 1; fi
virtual_box=0
fi

timedatectl set-ntp true

### Setup the disk and partitions ###
if [ $part_layout -eq 1 ]; then
echo -e "n\np\n\n\n\na\n  w\n" | fdisk $device
part_linux="${device}1"
mkfs.ext4 $part_linux
mount $part_linux /mnt; fi
if [ $part_layout -eq 2 ]; then
echo -e "g\n  n\n\n\n+260M\nt\n1\n  n\n\n\n\n  w\n" | fdisk $device
part_boot="${device}1"
part_linux="${device}2"
mkfs.fat -F 32 $part_boot
mkfs.ext4 $part_linux
mount $part_linux /mnt
mkdir /mnt/boot
mount $part_boot /mnt/boot; fi

### Install the basic system ###
pacstrap /mnt base base-devel linux linux-firmware man-db man-pages texinfo networkmanager gvim git grub htop neofetch
if [ $cpu -eq 1 ]; then pacstrap /mnt intel-ucode; else pacstrap /mnt amd-ucode; fi
if [ $nvidia_drivers -eq 1 ]; then pacstrap /mnt nvidia; fi
if [ $virtual_box -eq 1 ]; then pacstrap /mnt virtualbox-guest-utils; fi
if [ $part_layout -eq 2 ]; then pacstrap /mnt efibootmgr; fi

### Configure the basic system ###
genfstab -U /mnt >> /etc/fstab
if [ $virtual_box -eq 1 ]; then 
ln -sf /mnt/usr/share/zoneinfo/UTC /mnt/etc/localtime; else
ln -sf /mnt/usr/share/zoneinfo/America/New_York /mnt/etc/localtime; fi
arch-chroot /mnt hwclock --systohc
sed -i "176 s/^##*//" /mnt/etc/locale.gen
arch-chroot /mnt locale-gen
echo LANG=en_US.UTF-8 >> /mnt/etc/locale.conf
echo $hostname >> /mnt/etc/hostname
echo -e "127.0.0.1\tlocalhost\n::1\t\tlocalhost\n127.0.1.1\t${hostname}.localdomain\t${hostname}" >> /mnt/etc/hosts
arch-chroot /mnt systemctl enable NetworkManager
if [ $virtual_box -eq 1 ]; then arch-chroot /mnt systemctl enable vboxservice; fi
sed -i "33 s/^##*//;92,93 s/^##*//" /mnt/etc/pacman.conf
sed -i "37i ILoveCandy" /mnt/etc/pacman.conf
arch-chroot /mnt pacman -Syu

### Grub boot loader ###
if [ $part_layout -eq 1 ]; then arch-chroot /mnt grub-install --target=i386-pc $device; fi
if [ $part_layout -eq 2 ]; then arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=boot --bootloader-id=GRUB; fi
arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
sed -i "/GRUB_TIMEOUT=5/c\GRUB_TIMEOUT=0" /mnt/etc/default/grub
arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg

### Users ###
arch-chroot /mnt useradd -m -G wheel $user
sed -i "82 s/^##*//" /mnt/etc/sudoers
echo -e "${password}\n${password}" | arch-chroot /mnt passwd
echo -e "${password}\n${password}" | arch-chroot /mnt passwd $user

shutdown now
